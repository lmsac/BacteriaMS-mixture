else (if(monoisotopic)
n.terminus.mass.monoisotopic
else
n.terminus.mass.average)[n.terminus]
c.terminus.mass = if(is.null(c.terminus))
0
else (if(monoisotopic)
c.terminus.mass.monoisotopic
else
c.terminus.mass.average)[c.terminus]
sapply(strsplit(sequence, ''), function(aa.seq) {
sum(sapply(aa.seq, function(aa) {
aa.residues.mass[aa]
})) + n.terminus.mass + c.terminus.mass
})
}
peptide.mass('')
strsplit('','')
sapply(NULL, ptint)
sapply(NULL, print)
Peptides::mw('')
peptide.mass('')
peptide.mass = function(sequence, monoisotopic = FALSE, n.terminus = 'H', c.terminus = 'OH') {
aa.residues.mass = if(monoisotopic)
aa.residues.mass.monoisotopic
else
aa.residues.mass.average
n.terminus.mass = if(is.null(n.terminus))
0
else (if(monoisotopic)
n.terminus.mass.monoisotopic
else
n.terminus.mass.average)[n.terminus]
c.terminus.mass = if(is.null(c.terminus))
0
else (if(monoisotopic)
c.terminus.mass.monoisotopic
else
c.terminus.mass.average)[c.terminus]
sapply(strsplit(sequence, ''), function(aa.seq) {
sum(aa.residues.mass[aa.seq]) + n.terminus.mass + c.terminus.mass
})
}
peptide.mass('')
peptide.mass('')[1]
peptide.mass('AA')
peptide.mass = function(sequence, monoisotopic = FALSE, n.terminus = 'H', c.terminus = 'OH') {
aa.residues.mass = if(monoisotopic)
aa.residues.mass.monoisotopic
else
aa.residues.mass.average
n.terminus.mass = if(is.null(n.terminus))
0
else (if(monoisotopic)
n.terminus.mass.monoisotopic
else
n.terminus.mass.average)[n.terminus]
c.terminus.mass = if(is.null(c.terminus))
0
else (if(monoisotopic)
c.terminus.mass.monoisotopic
else
c.terminus.mass.average)[c.terminus]
sapply(strsplit(sequence, ''), function(aa.seq) {
sum(sapply(aa.seq, function(aa) {
aa.residues.mass[aa.seq]
})) + n.terminus.mass + c.terminus.mass
})
}
peptide.mass('AA')
peptide.mass = function(sequence, monoisotopic = FALSE, n.terminus = 'H', c.terminus = 'OH') {
aa.residues.mass = if(monoisotopic)
aa.residues.mass.monoisotopic
else
aa.residues.mass.average
n.terminus.mass = if(is.null(n.terminus))
0
else (if(monoisotopic)
n.terminus.mass.monoisotopic
else
n.terminus.mass.average)[n.terminus]
names(n.terminus.mass) = NULL
c.terminus.mass = if(is.null(c.terminus))
0
else (if(monoisotopic)
c.terminus.mass.monoisotopic
else
c.terminus.mass.average)[c.terminus]
names(c.terminus.mass) = NULL
sapply(strsplit(sequence, ''), function(aa.seq) {
sum(aa.residues.mass[aa.seq]) + n.terminus.mass + c.terminus.mass
})
}
peptide.mass('AA')
peptide.mass('')
30.010565 - 1.007825
30.026 - 1.008
peptide.mass('', monoisotopic = T, n.terminus = 'H', c.terminus = NULL)
c(function() 1, function() 2)
list(function() 1, function() 2)
list(`a*` = function() 1, function() 2)
list(`a*` = function() 1, function() 2)['a*']
list(`a*` = function() 1, function() 2)['a*']()
list(`a*` = function() 1, function() 2)[['a*']]()
fragment.mass = function(sequence, type, monoisotopic = FALSE, n.terminus = 'H', c.terminus = 'OH') {
mass = function(sequence,
n.terminus = 'H',
c.terminus = 'OH') {
if (monoisotopic) {
m = function()
peptide.mass(
sequence,
monoisotopic = T,
n.terminus = NULL,
c.terminus = NULL
)
n = function()
n.terminus.mass.monoisotopic[n.terminus]
cho = function()
29.00274
nh3 = function()
neutral.loss.mass.monoisotopic['NH3']
h2o = function()
neutral.loss.mass.monoisotopic['H2O']
h = function()
n.terminus.mass.monoisotopic['H']
nh2 = function()
nh3() - h()
c = function()
c.terminus.mass.monoisotopic[c.terminus]
co = function()
cho() - h()
}
else {
m = function()
peptide.mass(
sequence,
monoisotopic = F,
n.terminus = NULL,
c.terminus = NULL
)
n = function()
n.terminus.mass.average[n.terminus]
cho = function()
29.018
nh3 = function()
neutral.loss.mass.average['NH3']
h2o = function()
neutral.loss.mass.average['H2O']
h = function()
n.terminus.mass.average['H']
nh2 = function()
nh3() - h()
c = function()
c.terminus.mass.average[c.terminus]
co = function()
cho() - h()
}
a = function()
n() + m() - cho()
a.nh3 = function()
a() - nh3()
a.h2o = function()
a() - h2o()
b = function()
n() + m() - h()
b.nh3 = function()
b() - nh3()
b.h2o = function()
b() - h2o()
c. = function()
n() + m() + nh2()
x = function()
c() + m() + co() - h()
y = function()
c() + m() + h()
y.nh3 = function()
y() - nh3()
y.h2o = function()
y() - h2o()
z = function()
c() + m() - nh2()
list(
a = a,
`a*` = a.nh3,
ao = a.h2o,
b = b,
`b*` = b.nh3,
bo = b.h2o,
c = c.,
x = x,
y = y,
`y*` = y.nh3,
yo = y.h2o,
z = z
)
}
mass[[type]]
}
source('~/.active-rstudio-document')
fragment.mass(sequence, 'b')
source('~/.active-rstudio-document')
fragment.mass(sequence, 'b')
fragment.mass(sequence, 'b')()
source('~/.active-rstudio-document')
fragment.mass(sequence, 'b')
n.terminus.mass.monoisotopic['H']
function()n.terminus.mass.monoisotopic['H']
(function()n.terminus.mass.monoisotopic['H'])()
(function()n.terminus.mass.monoisotopic['H'])()+(function()
peptide.mass(
sequence,
monoisotopic = T,
n.terminus = NULL,
c.terminus = NULL
))()
(function()
peptide.mass(
sequence,
monoisotopic = T,
n.terminus = NULL,
c.terminus = NULL
))()
peptide.mass(
sequence,
monoisotopic = T,
n.terminus = NULL,
c.terminus = NULL
)
source('~/.active-rstudio-document')
fragment.mass(sequence, 'b')
peptide.mass(
sequence,
monoisotopic = T,
n.terminus = NULL,
c.terminus = NULL
)
source('~/.active-rstudio-document')
fragment.mass(sequence, 'b')
source('~/.active-rstudio-document')
substring(sequence, 1, 1:(nchar(sequence) - 1))
any(T,R)
any(T,F)
any(F,F)
any(F,F,0)
any(F,F,NA)
nchar(NULL)
nchar(NULL)<1
if(nchar(NULL)<1)T, else F
if(nchar(NULL)<1)T else F
1+c(1,2)
1/c(1,2)
(1+c(1,2))/c(1,2)
fragment.ions.mz = function(sequence, type = c('b', 'y'), charge = c(1, 2), monoisotopic = TRUE, ...) {
n.frag.seq = substring(sequence, 1, 1:(nchar(sequence) - 1))
c.frag.seq = rev(substring(sequence, 2:(nchar(sequence) - 1), nchar(sequence)))
lapply(type, function(t) {
frag.seq = if (any(type %in% c('a', 'a*', 'ao', 'b', 'b*', 'bo', 'c')))
n.frag.seq
else
c.frag.seq
sapply(frag.seq, function(frag) {
mass = fragment.mass.neutral(frag, type = t, monoisotopic = monoisotopic, ...)
(mass + charge) / charge
})
})
}
fragment.ions.mz(sequence)
fragment.ions.mz = function(sequence, type = c('b', 'y'), charge = c(1, 2), monoisotopic = TRUE, ...) {
n.frag.seq = substring(sequence, 1, 1:(nchar(sequence) - 1))
c.frag.seq = rev(substring(sequence, 2:(nchar(sequence) - 1), nchar(sequence)))
sapply(type, function(t) {
frag.seq = if (any(type %in% c('a', 'a*', 'ao', 'b', 'b*', 'bo', 'c')))
n.frag.seq
else
c.frag.seq
sapply(frag.seq, function(frag) {
mass = fragment.mass.neutral(frag, type = t, monoisotopic = monoisotopic, ...)
(mass + charge) / charge
})
})
}
fragment.ions.mz(sequence)
fragment.ions.mz = function(sequence, type = c('b', 'y'), charge = c(1, 2), monoisotopic = TRUE, ...) {
n.frag.seq = substring(sequence, 1, 1:(nchar(sequence) - 1))
c.frag.seq = substring(sequence, 2:(nchar(sequence) - 1), nchar(sequence))
sapply(type, function(t) {
frag.seq = if (any(type %in% c('a', 'a*', 'ao', 'b', 'b*', 'bo', 'c')))
n.frag.seq
else
c.frag.seq
sapply(frag.seq, function(frag) {
mass = fragment.mass.neutral(frag, type = t, monoisotopic = monoisotopic, ...)
(mass + charge) / charge
})
})
}
fragment.ions.mz(sequence)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
fragment.ions.mz(sequence)
source('~/.active-rstudio-document')
fragment.ions.mz(sequence)
fragment.ions.mz = function(sequence, type = c('b', 'y'), charge = c(1, 2), monoisotopic = TRUE, ...) {
n.frag.seq = substring(sequence, 1, 1:(nchar(sequence) - 1))
c.frag.seq = rev(substring(sequence, 2:(nchar(sequence) - 1), nchar(sequence)))
unlist(lapply(type, function(t) {
frag.seq = if (any(type %in% c('a', 'a*', 'ao', 'b', 'b*', 'bo', 'c')))
n.frag.seq
else
c.frag.seq
result = sapply(frag.seq, function(frag) {
mass = fragment.mass.neutral(frag, type = t, monoisotopic = monoisotopic, ...)
mz = (mass + charge) / charge
})
names(result) = paste0(t, 1:(nchar(sequence) - 1), '+', charge)
result
}))
}
fragment.ions.mz(sequence)
fragment.ions.mz = function(sequence, type = c('b', 'y'), charge = c(1, 2), monoisotopic = TRUE, ...) {
n.frag.seq = substring(sequence, 1, 1:(nchar(sequence) - 1))
c.frag.seq = rev(substring(sequence, 2:(nchar(sequence) - 1), nchar(sequence)))
unlist(lapply(type, function(t) {
frag.seq = if (any(type %in% c('a', 'a*', 'ao', 'b', 'b*', 'bo', 'c')))
n.frag.seq
else
c.frag.seq
frag.mass = sapply(frag.seq, function(frag) {
mass = fragment.mass.neutral(frag, type = t, monoisotopic = monoisotopic, ...)
})
result = sapply(charge, function(ch) {
mz = (frag.mass + ch) / ch
names(mz) = paste0(t, 1:(nchar(sequence) - 1), '+', ch)
mz
})
}))
}
fragment.ions.mz(sequence)
fragment.ions.mz = function(sequence, type = c('b', 'y'), charge = c(1, 2), monoisotopic = TRUE, ...) {
n.frag.seq = substring(sequence, 1, 1:(nchar(sequence) - 1))
c.frag.seq = rev(substring(sequence, 2:(nchar(sequence) - 1), nchar(sequence)))
(lapply(type, function(t) {
frag.seq = if (any(type %in% c('a', 'a*', 'ao', 'b', 'b*', 'bo', 'c')))
n.frag.seq
else
c.frag.seq
frag.mass = sapply(frag.seq, function(frag) {
mass = fragment.mass.neutral(frag, type = t, monoisotopic = monoisotopic, ...)
})
result = sapply(charge, function(ch) {
mz = (frag.mass + ch) / ch
names(mz) = paste0(t, 1:(nchar(sequence) - 1), '+', ch)
mz
})
}))
}
fragment.ions.mz(sequence)
fragment.ions.mz = function(sequence, type = c('b', 'y'), charge = c(1, 2), monoisotopic = TRUE, ...) {
n.frag.seq = substring(sequence, 1, 1:(nchar(sequence) - 1))
c.frag.seq = rev(substring(sequence, 2:(nchar(sequence) - 1), nchar(sequence)))
(lapply(type, function(t) {
frag.seq = if (any(type %in% c('a', 'a*', 'ao', 'b', 'b*', 'bo', 'c')))
n.frag.seq
else
c.frag.seq
frag.mass = sapply(frag.seq, function(frag) {
mass = fragment.mass.neutral(frag, type = t, monoisotopic = monoisotopic, ...)
})
result = lapply(charge, function(ch) {
mz = (frag.mass + ch) / ch
names(mz) = paste0(t, 1:(nchar(sequence) - 1), '+', ch)
mz
})
}))
}
fragment.ions.mz(sequence)
fragment.ions.mz = function(sequence, type = c('b', 'y'), charge = c(1, 2), monoisotopic = TRUE, ...) {
n.frag.seq = substring(sequence, 1, 1:(nchar(sequence) - 1))
c.frag.seq = rev(substring(sequence, 2:(nchar(sequence) - 1), nchar(sequence)))
unlist(lapply(type, function(t) {
frag.seq = if (any(type %in% c('a', 'a*', 'ao', 'b', 'b*', 'bo', 'c')))
n.frag.seq
else
c.frag.seq
frag.mass = sapply(frag.seq, function(frag) {
mass = fragment.mass.neutral(frag, type = t, monoisotopic = monoisotopic, ...)
})
result = lapply(charge, function(ch) {
mz = (frag.mass + ch) / ch
names(mz) = paste0(t, 1:(nchar(sequence) - 1), '+', ch)
mz
})
}))
}
fragment.ions.mz(sequence)
fragment.ions.mz(sequence, type = c('b*', 'y*'))
source('~/.active-rstudio-document')
fragment.ions.mz(sequence, type = c('b*', 'y*'))
Peptides::mw
aa.residues.mass.monoisotopic = c(
A = 71.03711,
R = 156.10111,
N = 114.04293,
D = 115.02694,
C = 103.00919,
E = 129.04259,
Q = 128.05858,
G = 57.02146,
H = 137.05891,
I = 113.08406,
L = 113.08406,
K = 128.09496,
M = 131.04049,
F = 147.06841,
P = 97.05276,
S = 87.03203,
T = 101.04768,
W = 186.07931,
Y = 163.06333,
V = 99.06841,
U = 150.95363,
O = 237.14772,
H2O = 18.01056
)
aa.residues.mass.monoisotopic = c(
A = 71.03711,
R = 156.10111,
N = 114.04293,
D = 115.02694,
C = 103.00919,
E = 129.04259,
Q = 128.05858,
G = 57.02146,
H = 137.05891,
I = 113.08406,
L = 113.08406,
K = 128.09496,
M = 131.04049,
F = 147.06841,
P = 97.05276,
S = 87.03203,
T = 101.04768,
W = 186.07931,
Y = 163.06333,
V = 99.06841,
U = 150.95363,
O = 237.14772
)
fragment.ions.mz(sequence, type = c('b', 'y'))
aa.residues.mass.monoisotopic = c(
A =	71.037114,
R =	156.101111,
N =	114.042927,
D =	115.026943,
C =	103.009185,
E =	129.042593,
Q =	128.058578,
G =	57.021464,
H =	137.058912,
I =	113.084064,
L =	113.084064,
K =	128.094963,
M =	131.040485,
F =	147.068414,
P =	97.052764,
S =	87.032028,
T =	101.047679,
U =	150.95363,
W =	186.079313,
Y =	163.06332,
V =	99.068414
)
?Peptides::aindex
?Peptides::boman
Peptides
??Peptides
setwd("F:/LMSAC/identification/code/src")
source('boostrap.R')
setwd("F:/LMSAC/mixture/code/src")
local({
SOURCE_PATHS = list.files(
path = 'functions',
pattern = '\\.R',
recursive = TRUE,
full.names = TRUE
)
lapply(SOURCE_PATHS, source)
})
reference.spectra = lapply(c(
list.files('data/reference/lmsac', pattern = '.txt', full.names = T),
list.files('data/reference/spectra19', pattern = '.txt', full.names = T)
), function(file) {
normalize.intensity(read.table(file))
})
reference.names = sapply(c(
list.files('data/reference/lmsac', pattern = '.txt'),
list.files('data/reference/spectra19', pattern = '.txt')
), function(file) {
strsplit(file, '\\.')[[1]][1]
})
names(reference.spectra) = reference.names
setwd("F:/LMSAC/mixture/code/src/data/sample/balanced/4/KoEcKpSa")
tolerance = 2000
sample.peaklists = lapply(list.files(pattern = '.txt', full.names = T), read.table)
combined.peaklist = combine.peaklists(sample.peaklists, tolerance)
reference.names
names(reference.spectra)
mix.peaklists(reference.spectra[c(3,4,8,5)], coefficients = c(0.27,0.26,0.25,0.15))
mix.peaklists(reference.spectra[c(3,4,8,5)], coefficients = c(0.27,0.26,0.25,0.15), tolerance = 2000)
simu = mix.peaklists(reference.spectra[c(3,4,8,5)], coefficients = c(0.27,0.26,0.25,0.15), tolerance = 2000)
score(combined.peaklist, simu, 2000)
